{"expireTime":9007200839200139000,"key":"gatsby-plugin-mdx-entire-payload-3c7f6a01b7f60f9d80a4ae6d4e09e0e5-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/jasonclark/Source/react-table/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":115,"offset":116},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":118},"end":{"line":5,"column":29,"offset":146},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"inlineCode","value":"useRowState","position":{"start":{"line":8,"column":3,"offset":151},"end":{"line":8,"column":16,"offset":164},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":149},"end":{"line":8,"column":16,"offset":164},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Plugin Hook","position":{"start":{"line":10,"column":3,"offset":168},"end":{"line":10,"column":14,"offset":179},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":168},"end":{"line":10,"column":14,"offset":179},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":166},"end":{"line":10,"column":14,"offset":179},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Optional","position":{"start":{"line":11,"column":3,"offset":182},"end":{"line":11,"column":11,"offset":190},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":182},"end":{"line":11,"column":11,"offset":190},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":180},"end":{"line":11,"column":11,"offset":190},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":166},"end":{"line":11,"column":11,"offset":190},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useRowState","position":{"start":{"line":13,"column":1,"offset":192},"end":{"line":13,"column":14,"offset":205},"indent":[]}},{"type":"text","value":" is a plugin hook that implements ","position":{"start":{"line":13,"column":14,"offset":205},"end":{"line":13,"column":48,"offset":239},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"basic state management for ","position":{"start":{"line":13,"column":50,"offset":241},"end":{"line":13,"column":77,"offset":268},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"prepared","position":{"start":{"line":13,"column":78,"offset":269},"end":{"line":13,"column":86,"offset":277},"indent":[]}}],"position":{"start":{"line":13,"column":77,"offset":268},"end":{"line":13,"column":87,"offset":278},"indent":[]}},{"type":"text","value":" rows and their cells","position":{"start":{"line":13,"column":87,"offset":278},"end":{"line":13,"column":108,"offset":299},"indent":[]}}],"position":{"start":{"line":13,"column":48,"offset":239},"end":{"line":13,"column":110,"offset":301},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":13,"column":110,"offset":301},"end":{"line":13,"column":111,"offset":302},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":192},"end":{"line":13,"column":111,"offset":302},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Table Options","position":{"start":{"line":15,"column":5,"offset":308},"end":{"line":15,"column":18,"offset":321},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":304},"end":{"line":15,"column":18,"offset":321},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following options are supported via the main options object passed to ","position":{"start":{"line":17,"column":1,"offset":323},"end":{"line":17,"column":75,"offset":397},"indent":[]}},{"type":"inlineCode","value":"useTable(options)","position":{"start":{"line":17,"column":75,"offset":397},"end":{"line":17,"column":94,"offset":416},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":323},"end":{"line":17,"column":94,"offset":416},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"initialState.rowState: Object<RowPathKey:Object<any, cellState: {columnId: Object}>>","position":{"start":{"line":19,"column":3,"offset":420},"end":{"line":19,"column":89,"offset":506},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":420},"end":{"line":19,"column":89,"offset":506},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Optional","position":{"start":{"line":20,"column":5,"offset":511},"end":{"line":20,"column":13,"offset":519},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":511},"end":{"line":20,"column":13,"offset":519},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":509},"end":{"line":20,"column":13,"offset":519},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defaults to ","position":{"start":{"line":21,"column":5,"offset":524},"end":{"line":21,"column":17,"offset":536},"indent":[]}},{"type":"inlineCode","value":"{}","position":{"start":{"line":21,"column":17,"offset":536},"end":{"line":21,"column":21,"offset":540},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":524},"end":{"line":21,"column":21,"offset":540},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":522},"end":{"line":21,"column":21,"offset":540},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a row's ID is found in this array, it will have the state of the value corresponding to that key.","position":{"start":{"line":22,"column":5,"offset":545},"end":{"line":22,"column":105,"offset":645},"indent":[]}}],"position":{"start":{"line":22,"column":5,"offset":545},"end":{"line":22,"column":105,"offset":645},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":543},"end":{"line":22,"column":105,"offset":645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Individual row states can contain anything, but they also contain a ","position":{"start":{"line":23,"column":5,"offset":650},"end":{"line":23,"column":73,"offset":718},"indent":[]}},{"type":"inlineCode","value":"cellState","position":{"start":{"line":23,"column":73,"offset":718},"end":{"line":23,"column":84,"offset":729},"indent":[]}},{"type":"text","value":" key, which provides cell-level state based on column ID's to every\n","position":{"start":{"line":23,"column":84,"offset":729},"end":{"line":24,"column":5,"offset":801},"indent":[5]}},{"type":"strong","children":[{"type":"text","value":"prepared","position":{"start":{"line":24,"column":7,"offset":803},"end":{"line":24,"column":15,"offset":811},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":801},"end":{"line":24,"column":17,"offset":813},"indent":[]}},{"type":"text","value":" cell in the table.","position":{"start":{"line":24,"column":17,"offset":813},"end":{"line":24,"column":36,"offset":832},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":650},"end":{"line":24,"column":36,"offset":832},"indent":[5]}}],"position":{"start":{"line":23,"column":3,"offset":648},"end":{"line":24,"column":36,"offset":832},"indent":[3]}}],"position":{"start":{"line":20,"column":3,"offset":509},"end":{"line":24,"column":36,"offset":832},"indent":[3,3,3,3]}}],"position":{"start":{"line":19,"column":1,"offset":418},"end":{"line":24,"column":36,"offset":832},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"initialRowStateAccessor: Function(originalRow) => Object<any>","position":{"start":{"line":25,"column":3,"offset":835},"end":{"line":25,"column":66,"offset":898},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":835},"end":{"line":25,"column":66,"offset":898},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Optional","position":{"start":{"line":26,"column":5,"offset":903},"end":{"line":26,"column":13,"offset":911},"indent":[]}}],"position":{"start":{"line":26,"column":5,"offset":903},"end":{"line":26,"column":13,"offset":911},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":901},"end":{"line":26,"column":13,"offset":911},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defaults to: ","position":{"start":{"line":27,"column":5,"offset":916},"end":{"line":27,"column":18,"offset":929},"indent":[]}},{"type":"inlineCode","value":"row => ({})","position":{"start":{"line":27,"column":18,"offset":929},"end":{"line":27,"column":31,"offset":942},"indent":[]}}],"position":{"start":{"line":27,"column":5,"offset":916},"end":{"line":27,"column":31,"offset":942},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":914},"end":{"line":27,"column":31,"offset":942},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This function should return the initial state for a row.","position":{"start":{"line":28,"column":5,"offset":947},"end":{"line":28,"column":61,"offset":1003},"indent":[]}}],"position":{"start":{"line":28,"column":5,"offset":947},"end":{"line":28,"column":61,"offset":1003},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":945},"end":{"line":28,"column":61,"offset":1003},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If this function is defined, it will be passed a ","position":{"start":{"line":29,"column":5,"offset":1008},"end":{"line":29,"column":54,"offset":1057},"indent":[]}},{"type":"inlineCode","value":"Row","position":{"start":{"line":29,"column":54,"offset":1057},"end":{"line":29,"column":59,"offset":1062},"indent":[]}},{"type":"text","value":" object, from which you can return a value to use as the initial state, eg. ","position":{"start":{"line":29,"column":59,"offset":1062},"end":{"line":29,"column":135,"offset":1138},"indent":[]}},{"type":"inlineCode","value":"row => row.original.initialState","position":{"start":{"line":29,"column":135,"offset":1138},"end":{"line":29,"column":169,"offset":1172},"indent":[]}}],"position":{"start":{"line":29,"column":5,"offset":1008},"end":{"line":29,"column":169,"offset":1172},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1006},"end":{"line":29,"column":169,"offset":1172},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":901},"end":{"line":29,"column":169,"offset":1172},"indent":[3,3,3]}}],"position":{"start":{"line":25,"column":1,"offset":833},"end":{"line":29,"column":169,"offset":1172},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"initialCellStateAccessor: Function(originalRow) => Object<any>","position":{"start":{"line":30,"column":3,"offset":1175},"end":{"line":30,"column":67,"offset":1239},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1175},"end":{"line":30,"column":67,"offset":1239},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Optional","position":{"start":{"line":31,"column":7,"offset":1246},"end":{"line":31,"column":15,"offset":1254},"indent":[]}}],"position":{"start":{"line":31,"column":5,"offset":1244},"end":{"line":31,"column":17,"offset":1256},"indent":[]}}],"position":{"start":{"line":31,"column":5,"offset":1244},"end":{"line":31,"column":17,"offset":1256},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1242},"end":{"line":31,"column":17,"offset":1256},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defaults to: ","position":{"start":{"line":32,"column":5,"offset":1261},"end":{"line":32,"column":18,"offset":1274},"indent":[]}},{"type":"inlineCode","value":"cell => ({})","position":{"start":{"line":32,"column":18,"offset":1274},"end":{"line":32,"column":32,"offset":1288},"indent":[]}}],"position":{"start":{"line":32,"column":5,"offset":1261},"end":{"line":32,"column":32,"offset":1288},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1259},"end":{"line":32,"column":32,"offset":1288},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This function should return the initial state for a cell.","position":{"start":{"line":33,"column":5,"offset":1293},"end":{"line":33,"column":62,"offset":1350},"indent":[]}}],"position":{"start":{"line":33,"column":5,"offset":1293},"end":{"line":33,"column":62,"offset":1350},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1291},"end":{"line":33,"column":62,"offset":1350},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If this function is defined, it will be passed a ","position":{"start":{"line":34,"column":5,"offset":1355},"end":{"line":34,"column":54,"offset":1404},"indent":[]}},{"type":"inlineCode","value":"Cell","position":{"start":{"line":34,"column":54,"offset":1404},"end":{"line":34,"column":60,"offset":1410},"indent":[]}},{"type":"text","value":" object, from which you can return a value to use as the initial state, eg. ","position":{"start":{"line":34,"column":60,"offset":1410},"end":{"line":34,"column":136,"offset":1486},"indent":[]}},{"type":"inlineCode","value":"cell => cell.row.original.initialCellState[cell.column.id]","position":{"start":{"line":34,"column":136,"offset":1486},"end":{"line":34,"column":196,"offset":1546},"indent":[]}}],"position":{"start":{"line":34,"column":5,"offset":1355},"end":{"line":34,"column":196,"offset":1546},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1353},"end":{"line":34,"column":196,"offset":1546},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1242},"end":{"line":34,"column":196,"offset":1546},"indent":[3,3,3]}}],"position":{"start":{"line":30,"column":1,"offset":1173},"end":{"line":34,"column":196,"offset":1546},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"autoResetRowState: Boolean","position":{"start":{"line":35,"column":3,"offset":1549},"end":{"line":35,"column":31,"offset":1577},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1549},"end":{"line":35,"column":31,"offset":1577},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defaults to ","position":{"start":{"line":36,"column":5,"offset":1582},"end":{"line":36,"column":17,"offset":1594},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":36,"column":17,"offset":1594},"end":{"line":36,"column":23,"offset":1600},"indent":[]}}],"position":{"start":{"line":36,"column":5,"offset":1582},"end":{"line":36,"column":23,"offset":1600},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1580},"end":{"line":36,"column":23,"offset":1600},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When ","position":{"start":{"line":37,"column":5,"offset":1605},"end":{"line":37,"column":10,"offset":1610},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":37,"column":10,"offset":1610},"end":{"line":37,"column":16,"offset":1616},"indent":[]}},{"type":"text","value":", the ","position":{"start":{"line":37,"column":16,"offset":1616},"end":{"line":37,"column":22,"offset":1622},"indent":[]}},{"type":"inlineCode","value":"rowState","position":{"start":{"line":37,"column":22,"offset":1622},"end":{"line":37,"column":32,"offset":1632},"indent":[]}},{"type":"text","value":" state will automatically reset if any of the following conditions are met:","position":{"start":{"line":37,"column":32,"offset":1632},"end":{"line":37,"column":107,"offset":1707},"indent":[]}}],"position":{"start":{"line":37,"column":5,"offset":1605},"end":{"line":37,"column":107,"offset":1707},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"data","position":{"start":{"line":38,"column":7,"offset":1714},"end":{"line":38,"column":13,"offset":1720},"indent":[]}},{"type":"text","value":" is changed","position":{"start":{"line":38,"column":13,"offset":1720},"end":{"line":38,"column":24,"offset":1731},"indent":[]}}],"position":{"start":{"line":38,"column":7,"offset":1714},"end":{"line":38,"column":24,"offset":1731},"indent":[]}}],"position":{"start":{"line":38,"column":5,"offset":1712},"end":{"line":38,"column":24,"offset":1731},"indent":[]}}],"position":{"start":{"line":38,"column":5,"offset":1712},"end":{"line":38,"column":24,"offset":1731},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1603},"end":{"line":38,"column":24,"offset":1731},"indent":[3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To disable, set to ","position":{"start":{"line":39,"column":5,"offset":1736},"end":{"line":39,"column":24,"offset":1755},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":39,"column":24,"offset":1755},"end":{"line":39,"column":31,"offset":1762},"indent":[]}}],"position":{"start":{"line":39,"column":5,"offset":1736},"end":{"line":39,"column":31,"offset":1762},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1734},"end":{"line":39,"column":31,"offset":1762},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For more information see the FAQ ","position":{"start":{"line":40,"column":5,"offset":1767},"end":{"line":40,"column":38,"offset":1800},"indent":[]}},{"type":"link","title":null,"url":"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes","children":[{"type":"text","value":"\"How do I stop my table state from automatically resetting when my data changes?\"","position":{"start":{"line":40,"column":39,"offset":1801},"end":{"line":40,"column":120,"offset":1882},"indent":[]}}],"position":{"start":{"line":40,"column":38,"offset":1800},"end":{"line":40,"column":207,"offset":1969},"indent":[]}}],"position":{"start":{"line":40,"column":5,"offset":1767},"end":{"line":40,"column":207,"offset":1969},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1765},"end":{"line":40,"column":207,"offset":1969},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1580},"end":{"line":40,"column":207,"offset":1969},"indent":[3,3,3,3]}}],"position":{"start":{"line":35,"column":1,"offset":1547},"end":{"line":40,"column":207,"offset":1969},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":19,"column":1,"offset":418},"end":{"line":40,"column":207,"offset":1969},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Instance Properties","position":{"start":{"line":42,"column":5,"offset":1975},"end":{"line":42,"column":24,"offset":1994},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1971},"end":{"line":42,"column":24,"offset":1994},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following values are provided to the table ","position":{"start":{"line":44,"column":1,"offset":1996},"end":{"line":44,"column":48,"offset":2043},"indent":[]}},{"type":"inlineCode","value":"instance","position":{"start":{"line":44,"column":48,"offset":2043},"end":{"line":44,"column":58,"offset":2053},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":44,"column":58,"offset":2053},"end":{"line":44,"column":59,"offset":2054},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1996},"end":{"line":44,"column":59,"offset":2054},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"setRowState: Function(rowPath: Array<string>, updater: Function | Any) => void","position":{"start":{"line":46,"column":3,"offset":2058},"end":{"line":46,"column":83,"offset":2138},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2058},"end":{"line":46,"column":83,"offset":2138},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use this function to programmatically update the state of a row.","position":{"start":{"line":47,"column":5,"offset":2143},"end":{"line":47,"column":69,"offset":2207},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":2143},"end":{"line":47,"column":69,"offset":2207},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2141},"end":{"line":47,"column":69,"offset":2207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"updater","position":{"start":{"line":48,"column":5,"offset":2212},"end":{"line":48,"column":14,"offset":2221},"indent":[]}},{"type":"text","value":" can be a function or value. If a ","position":{"start":{"line":48,"column":14,"offset":2221},"end":{"line":48,"column":48,"offset":2255},"indent":[]}},{"type":"inlineCode","value":"function","position":{"start":{"line":48,"column":48,"offset":2255},"end":{"line":48,"column":58,"offset":2265},"indent":[]}},{"type":"text","value":" is passed, it will receive the current value and expect a new one to be returned.","position":{"start":{"line":48,"column":58,"offset":2265},"end":{"line":48,"column":140,"offset":2347},"indent":[]}}],"position":{"start":{"line":48,"column":5,"offset":2212},"end":{"line":48,"column":140,"offset":2347},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2210},"end":{"line":48,"column":140,"offset":2347},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2141},"end":{"line":48,"column":140,"offset":2347},"indent":[3]}}],"position":{"start":{"line":46,"column":1,"offset":2056},"end":{"line":48,"column":140,"offset":2347},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"setCellState: Function(rowPath: Array<string>, columnId: String, updater: Function | Any) => void","position":{"start":{"line":49,"column":3,"offset":2350},"end":{"line":49,"column":102,"offset":2449},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2350},"end":{"line":49,"column":102,"offset":2449},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use this function to programmatically update the cell of a row.","position":{"start":{"line":50,"column":5,"offset":2454},"end":{"line":50,"column":68,"offset":2517},"indent":[]}}],"position":{"start":{"line":50,"column":5,"offset":2454},"end":{"line":50,"column":68,"offset":2517},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2452},"end":{"line":50,"column":68,"offset":2517},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"updater","position":{"start":{"line":51,"column":5,"offset":2522},"end":{"line":51,"column":14,"offset":2531},"indent":[]}},{"type":"text","value":" can be a function or value. If a ","position":{"start":{"line":51,"column":14,"offset":2531},"end":{"line":51,"column":48,"offset":2565},"indent":[]}},{"type":"inlineCode","value":"function","position":{"start":{"line":51,"column":48,"offset":2565},"end":{"line":51,"column":58,"offset":2575},"indent":[]}},{"type":"text","value":" is passed, it will receive the current value and expect a new one to be returned.","position":{"start":{"line":51,"column":58,"offset":2575},"end":{"line":51,"column":140,"offset":2657},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":2522},"end":{"line":51,"column":140,"offset":2657},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":2520},"end":{"line":51,"column":140,"offset":2657},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2452},"end":{"line":51,"column":140,"offset":2657},"indent":[3]}}],"position":{"start":{"line":49,"column":1,"offset":2348},"end":{"line":51,"column":140,"offset":2657},"indent":[1,1]}}],"position":{"start":{"line":46,"column":1,"offset":2056},"end":{"line":51,"column":140,"offset":2657},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Row Properties","position":{"start":{"line":53,"column":5,"offset":2663},"end":{"line":53,"column":19,"offset":2677},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2659},"end":{"line":53,"column":19,"offset":2677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following additional properties are available on every ","position":{"start":{"line":55,"column":1,"offset":2679},"end":{"line":55,"column":60,"offset":2738},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"prepared","position":{"start":{"line":55,"column":62,"offset":2740},"end":{"line":55,"column":70,"offset":2748},"indent":[]}}],"position":{"start":{"line":55,"column":60,"offset":2738},"end":{"line":55,"column":72,"offset":2750},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":55,"column":72,"offset":2750},"end":{"line":55,"column":73,"offset":2751},"indent":[]}},{"type":"inlineCode","value":"row","position":{"start":{"line":55,"column":73,"offset":2751},"end":{"line":55,"column":78,"offset":2756},"indent":[]}},{"type":"text","value":" object returned by the table instance.","position":{"start":{"line":55,"column":78,"offset":2756},"end":{"line":55,"column":117,"offset":2795},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2679},"end":{"line":55,"column":117,"offset":2795},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"state: Object","position":{"start":{"line":57,"column":3,"offset":2799},"end":{"line":57,"column":18,"offset":2814},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":2799},"end":{"line":57,"column":18,"offset":2814},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This is the state object for each row, pre-mapped to the row from the table state's ","position":{"start":{"line":58,"column":5,"offset":2819},"end":{"line":58,"column":89,"offset":2903},"indent":[]}},{"type":"inlineCode","value":"rowState","position":{"start":{"line":58,"column":89,"offset":2903},"end":{"line":58,"column":99,"offset":2913},"indent":[]}},{"type":"text","value":" object via ","position":{"start":{"line":58,"column":99,"offset":2913},"end":{"line":58,"column":111,"offset":2925},"indent":[]}},{"type":"inlineCode","value":"rowState[row.id]","position":{"start":{"line":58,"column":111,"offset":2925},"end":{"line":58,"column":129,"offset":2943},"indent":[]}}],"position":{"start":{"line":58,"column":5,"offset":2819},"end":{"line":58,"column":129,"offset":2943},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":2817},"end":{"line":58,"column":129,"offset":2943},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"May also contain a ","position":{"start":{"line":59,"column":5,"offset":2948},"end":{"line":59,"column":24,"offset":2967},"indent":[]}},{"type":"inlineCode","value":"cellState","position":{"start":{"line":59,"column":24,"offset":2967},"end":{"line":59,"column":35,"offset":2978},"indent":[]}},{"type":"text","value":" key/value pair, which is used to provide individual cell states to this row's cells","position":{"start":{"line":59,"column":35,"offset":2978},"end":{"line":59,"column":119,"offset":3062},"indent":[]}}],"position":{"start":{"line":59,"column":5,"offset":2948},"end":{"line":59,"column":119,"offset":3062},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":2946},"end":{"line":59,"column":119,"offset":3062},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":2817},"end":{"line":59,"column":119,"offset":3062},"indent":[3]}}],"position":{"start":{"line":57,"column":1,"offset":2797},"end":{"line":59,"column":119,"offset":3062},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"setState: Function(updater: Function | any)","position":{"start":{"line":60,"column":3,"offset":3065},"end":{"line":60,"column":48,"offset":3110},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":3065},"end":{"line":60,"column":48,"offset":3110},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use this function to programmatically update the state of a row.","position":{"start":{"line":61,"column":5,"offset":3115},"end":{"line":61,"column":69,"offset":3179},"indent":[]}}],"position":{"start":{"line":61,"column":5,"offset":3115},"end":{"line":61,"column":69,"offset":3179},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3113},"end":{"line":61,"column":69,"offset":3179},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"updater","position":{"start":{"line":62,"column":5,"offset":3184},"end":{"line":62,"column":14,"offset":3193},"indent":[]}},{"type":"text","value":" can be a function or value. If a ","position":{"start":{"line":62,"column":14,"offset":3193},"end":{"line":62,"column":48,"offset":3227},"indent":[]}},{"type":"inlineCode","value":"function","position":{"start":{"line":62,"column":48,"offset":3227},"end":{"line":62,"column":58,"offset":3237},"indent":[]}},{"type":"text","value":" is passed, it will receive the current value and expect a new one to be returned.","position":{"start":{"line":62,"column":58,"offset":3237},"end":{"line":62,"column":140,"offset":3319},"indent":[]}}],"position":{"start":{"line":62,"column":5,"offset":3184},"end":{"line":62,"column":140,"offset":3319},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":3182},"end":{"line":62,"column":140,"offset":3319},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3113},"end":{"line":62,"column":140,"offset":3319},"indent":[3]}}],"position":{"start":{"line":60,"column":1,"offset":3063},"end":{"line":62,"column":140,"offset":3319},"indent":[1,1]}}],"position":{"start":{"line":57,"column":1,"offset":2797},"end":{"line":62,"column":140,"offset":3319},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Cell Properties","position":{"start":{"line":64,"column":5,"offset":3325},"end":{"line":64,"column":20,"offset":3340},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3321},"end":{"line":64,"column":20,"offset":3340},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following additional properties are available on every ","position":{"start":{"line":66,"column":1,"offset":3342},"end":{"line":66,"column":60,"offset":3401},"indent":[]}},{"type":"inlineCode","value":"Cell","position":{"start":{"line":66,"column":60,"offset":3401},"end":{"line":66,"column":66,"offset":3407},"indent":[]}},{"type":"text","value":" object returned in an array of ","position":{"start":{"line":66,"column":66,"offset":3407},"end":{"line":66,"column":98,"offset":3439},"indent":[]}},{"type":"inlineCode","value":"cells","position":{"start":{"line":66,"column":98,"offset":3439},"end":{"line":66,"column":105,"offset":3446},"indent":[]}},{"type":"text","value":" on every row object.","position":{"start":{"line":66,"column":105,"offset":3446},"end":{"line":66,"column":126,"offset":3467},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3342},"end":{"line":66,"column":126,"offset":3467},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"state: Object","position":{"start":{"line":68,"column":3,"offset":3471},"end":{"line":68,"column":18,"offset":3486},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3471},"end":{"line":68,"column":18,"offset":3486},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This is the state object for each cell, pre-mapped to the cell from the table state's ","position":{"start":{"line":69,"column":5,"offset":3491},"end":{"line":69,"column":91,"offset":3577},"indent":[]}},{"type":"inlineCode","value":"rowState","position":{"start":{"line":69,"column":91,"offset":3577},"end":{"line":69,"column":101,"offset":3587},"indent":[]}},{"type":"text","value":" object via ","position":{"start":{"line":69,"column":101,"offset":3587},"end":{"line":69,"column":113,"offset":3599},"indent":[]}},{"type":"inlineCode","value":"rowState[row.id].cellState[columnId]","position":{"start":{"line":69,"column":113,"offset":3599},"end":{"line":69,"column":151,"offset":3637},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":3491},"end":{"line":69,"column":151,"offset":3637},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":3489},"end":{"line":69,"column":151,"offset":3637},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":3489},"end":{"line":69,"column":151,"offset":3637},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3469},"end":{"line":69,"column":151,"offset":3637},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"setState: Function(updater: Function | any)","position":{"start":{"line":70,"column":3,"offset":3640},"end":{"line":70,"column":48,"offset":3685},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":3640},"end":{"line":70,"column":48,"offset":3685},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use this function to programmatically update the state of a cell.","position":{"start":{"line":71,"column":5,"offset":3690},"end":{"line":71,"column":70,"offset":3755},"indent":[]}}],"position":{"start":{"line":71,"column":5,"offset":3690},"end":{"line":71,"column":70,"offset":3755},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":3688},"end":{"line":71,"column":70,"offset":3755},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"updater","position":{"start":{"line":72,"column":5,"offset":3760},"end":{"line":72,"column":14,"offset":3769},"indent":[]}},{"type":"text","value":" can be a function or value. If a ","position":{"start":{"line":72,"column":14,"offset":3769},"end":{"line":72,"column":48,"offset":3803},"indent":[]}},{"type":"inlineCode","value":"function","position":{"start":{"line":72,"column":48,"offset":3803},"end":{"line":72,"column":58,"offset":3813},"indent":[]}},{"type":"text","value":" is passed, it will receive the current value and expect a new one to be returned.","position":{"start":{"line":72,"column":58,"offset":3813},"end":{"line":72,"column":140,"offset":3895},"indent":[]}}],"position":{"start":{"line":72,"column":5,"offset":3760},"end":{"line":72,"column":140,"offset":3895},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":3758},"end":{"line":72,"column":140,"offset":3895},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":3688},"end":{"line":72,"column":140,"offset":3895},"indent":[3]}}],"position":{"start":{"line":70,"column":1,"offset":3638},"end":{"line":72,"column":140,"offset":3895},"indent":[1,1]}}],"position":{"start":{"line":68,"column":1,"offset":3469},"end":{"line":72,"column":140,"offset":3895},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":75,"column":1,"offset":3898},"end":{"line":75,"column":31,"offset":3928},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":31,"offset":3928}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"userowstate\"\n    }}><inlineCode parentName=\"h1\">{`useRowState`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useRowState`}</inlineCode>{` is a plugin hook that implements `}<strong parentName=\"p\">{`basic state management for `}<em parentName=\"strong\">{`prepared`}</em>{` rows and their cells`}</strong>{`.`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.rowState: Object<RowPathKey:Object<any, cellState: {columnId: Object}>>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`{}`}</inlineCode></li>\n          <li parentName=\"ul\">{`If a row's ID is found in this array, it will have the state of the value corresponding to that key.`}</li>\n          <li parentName=\"ul\">{`Individual row states can contain anything, but they also contain a `}<inlineCode parentName=\"li\">{`cellState`}</inlineCode>{` key, which provides cell-level state based on column ID's to every\n`}<strong parentName=\"li\">{`prepared`}</strong>{` cell in the table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialRowStateAccessor: Function(originalRow) => Object<any>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to: `}<inlineCode parentName=\"li\">{`row => ({})`}</inlineCode></li>\n          <li parentName=\"ul\">{`This function should return the initial state for a row.`}</li>\n          <li parentName=\"ul\">{`If this function is defined, it will be passed a `}<inlineCode parentName=\"li\">{`Row`}</inlineCode>{` object, from which you can return a value to use as the initial state, eg. `}<inlineCode parentName=\"li\">{`row => row.original.initialState`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialCellStateAccessor: Function(originalRow) => Object<any>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Optional`}</strong></li>\n          <li parentName=\"ul\">{`Defaults to: `}<inlineCode parentName=\"li\">{`cell => ({})`}</inlineCode></li>\n          <li parentName=\"ul\">{`This function should return the initial state for a cell.`}</li>\n          <li parentName=\"ul\">{`If this function is defined, it will be passed a `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` object, from which you can return a value to use as the initial state, eg. `}<inlineCode parentName=\"li\">{`cell => cell.row.original.initialCellState[cell.column.id]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetRowState: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following values are provided to the table `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setRowState: Function(rowPath: Array<string>, updater: Function | Any) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setCellState: Function(rowPath: Array<string>, columnId: String, updater: Function | Any) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the cell of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"row-properties\"\n    }}>{`Row Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<strong parentName=\"p\">{`prepared`}</strong>{` `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the state object for each row, pre-mapped to the row from the table state's `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` object via `}<inlineCode parentName=\"li\">{`rowState[row.id]`}</inlineCode></li>\n          <li parentName=\"ul\">{`May also contain a `}<inlineCode parentName=\"li\">{`cellState`}</inlineCode>{` key/value pair, which is used to provide individual cell states to this row's cells`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setState: Function(updater: Function | any)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"cell-properties\"\n    }}>{`Cell Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`Cell`}</inlineCode>{` object returned in an array of `}<inlineCode parentName=\"p\">{`cells`}</inlineCode>{` on every row object.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the state object for each cell, pre-mapped to the cell from the table state's `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` object via `}<inlineCode parentName=\"li\">{`rowState[row.id].cellState[columnId]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setState: Function(updater: Function | any)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a cell.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}